{"version":3,"sources":["webpack://gatsby-personal-site/./src/components/Content.tsx","webpack://gatsby-personal-site/./src/components/Tags/Tags.tsx","webpack://gatsby-personal-site/./src/components/Tags/index.ts","webpack://gatsby-personal-site/./src/components/Tags/TagsContainer.tsx","webpack://gatsby-personal-site/./src/pages/tags.tsx"],"names":["Wrapper","styled","props","fullHeight","theme","media","max","lg","md","sm","BottomHeight","children","tags","map","tag","key","fieldValue","to","totalCount","data","useStaticQuery","allMarkdownRemark","group","sort","a","b","siteTitle","site","siteMetadata","title","Layout","Head","keywords","Stars","normalVelocity","containerOpacity","addEventListeners","Content"],"mappings":"yKAOaA,EAAUC,oBAAH,4DAAGA,CAAH,kJASR,SAAAC,GAAK,OAAKA,EAAMC,WAAa,OAAS,UAE9C,SAAAD,GAAK,OAAIA,EAAME,MAAMC,MAAMC,IAAIC,GAA1B,mHAML,SAAAL,GAAK,OAAIA,EAAME,MAAMC,MAAMC,IAAIE,GAA1B,oGAML,SAAAN,GAAK,OAAIA,EAAME,MAAMC,MAAMC,IAAIG,GAA1B,kFAMHC,EAAeT,oBAAH,iEAAGA,CAAH,mBAgBlB,IAPwC,SAAC,GAAD,IAAEU,EAAF,EAAEA,SAAF,IAAYR,kBAAZ,gBACtC,gBAACH,EAAD,CAASG,WAAYA,GAClBQ,EACD,gBAACD,EAAD,S,6ICfJ,EAzBkC,SAAC,GAAY,IAAXE,EAAU,EAAVA,KAClC,OACE,gCACE,gBAAC,KAAD,KACE,gBAAC,KAAD,iBACA,gBAAC,KAAD,6BAEF,+BACE,gBAAC,KAAD,KACGA,GACCA,EAAKC,KACH,SAAAC,GAAG,OACDA,GACE,gBAAC,KAAD,CAAKC,IAAKD,EAAIE,WAAYC,GAAE,SAAWH,EAAIE,WAAf,KACzBF,EAAIE,WADP,MAEE,6BAAQF,EAAII,oB,UCrBhC,ECGgC,WAC9B,IAAMC,GAAOC,oBAAe,cAWtBR,EACJO,EAAKE,mBACLF,EAAKE,kBAAkBC,MAAMC,MAC3B,SAACC,EAAQC,GAAT,OAAoBA,EAAEP,WAAaM,EAAEN,cAGzC,OAAO,gBAAC,EAAD,CAAMN,KAAMA,KCyBrB,EAnC0C,SAAC,GAAY,IAC/Cc,EAD8C,EAAVP,KACnBQ,KAAKC,aAAaC,MAEzC,OACE,gBAACC,EAAA,EAAD,CAAQD,MAAOH,GACb,gBAACK,EAAA,EAAD,CACEF,MAAM,WACNG,SAAU,CAAC,OAAD,0DASZ,gBAACC,EAAA,EAAD,CACEC,eAAgB,KAChBC,iBAAkB,GAClBC,mBAAmB,IAErB,gBAACC,EAAA,EAAD,KACE,gBAAC,EAAD","file":"component---src-pages-tags-tsx-a8fec2bde9c760d22c0d.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\n\ntype WrapperProps = {\n  fullHeight: boolean\n}\n\nexport const Wrapper = styled.div<WrapperProps>`\n  max-width: 68rem;\n  width: calc(100% - 9.25rem * 2);\n  margin: 11rem auto 5rem;\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  height: ${props => (props.fullHeight ? '100%' : 'auto')};\n\n  ${props => props.theme.media.max.lg`\n    width: 1.45rem;\n    margin: 8rem auto 3rem;\n    width: calc(100% - 11rem * 2);\n  `}\n\n  ${props => props.theme.media.max.md`\n    width: 100%;\n    margin: 4rem auto 0;\n    padding: 0 3rem 6rem;\n  `}\n  \n  ${props => props.theme.media.max.sm`\n    margin: 2rem auto 0;\n    padding: 0 2rem 6rem;\n  `}\n`\n\nconst BottomHeight = styled.div`\n  height: 10rem;\n`\n\ninterface ContentProps {\n  readonly children: React.ReactNode\n  readonly fullHeight?: boolean\n}\n\nconst Content: React.FC<ContentProps> = ({children, fullHeight = true}) => (\n  <Wrapper fullHeight={fullHeight}>\n    {children}\n    <BottomHeight />\n  </Wrapper>\n)\n\nexport default Content\n","import React from 'react'\nimport {Tag as TagInterface} from '../../types'\nimport {Description, Header, ItemTags, Tag, Title} from '../../styles'\n\ninterface TagsProps {\n  tags: TagInterface[]\n}\n\nconst Tags: React.FC<TagsProps> = ({tags}) => {\n  return (\n    <>\n      <Header>\n        <Title>All tags</Title>\n        <Description>Tags from the works</Description>\n      </Header>\n      <article>\n        <ItemTags>\n          {tags &&\n            tags.map(\n              tag =>\n                tag && (\n                  <Tag key={tag.fieldValue} to={`/tags/${tag.fieldValue}/`}>\n                    {tag.fieldValue} -&nbsp;\n                    <small>{tag.totalCount}</small>\n                  </Tag>\n                )\n            )}\n        </ItemTags>\n      </article>\n    </>\n  )\n}\n\nexport default Tags\n","import TagsContainer from './TagsContainer'\n\nexport default TagsContainer\n","import React from 'react'\nimport Tags from './Tags'\nimport {graphql, useStaticQuery} from 'gatsby'\nimport {Tag} from '../../types'\n\nconst TagsContainer: React.FC = () => {\n  const data = useStaticQuery(graphql`\n    query TagsQuery {\n      allMarkdownRemark(filter: {frontmatter: {published: {ne: false}}}) {\n        group(field: frontmatter___tags) {\n          fieldValue\n          totalCount\n        }\n      }\n    }\n  `)\n\n  const tags: Tag[] =\n    data.allMarkdownRemark &&\n    data.allMarkdownRemark.group.sort(\n      (a: Tag, b: Tag) => b.totalCount - a.totalCount\n    )\n\n  return <Tags tags={tags} />\n}\n\nexport default TagsContainer\n","import React from 'react'\nimport {graphql} from 'gatsby'\nimport Layout from '../components/Layout'\nimport Head from '../components/Head'\nimport Stars from '../components/Stars'\nimport Content from '../components/Content'\nimport Tags from '../components/Tags'\nimport {TitlePageQueryData} from '../types'\n\ninterface TagsPageProps {\n  readonly data: TitlePageQueryData\n}\n\nconst TagsPage: React.FC<TagsPageProps> = ({data}) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout title={siteTitle}>\n      <Head\n        title=\"All tags\"\n        keywords={[\n          `blog`,\n          `gatsby`,\n          `typescript`,\n          `javascript`,\n          `portfolio`,\n          `react`\n        ]}\n      />\n      <Stars\n        normalVelocity={0.0001}\n        containerOpacity={0.3}\n        addEventListeners={false}\n      />\n      <Content>\n        <Tags />\n      </Content>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      ...SiteTitle\n    }\n  }\n`\nexport default TagsPage\n"],"sourceRoot":""}