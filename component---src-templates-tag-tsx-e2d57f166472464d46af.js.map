{"version":3,"sources":["webpack:///./src/templates/tag.tsx"],"names":["MoreLink","styled","Link","props","theme","colors","light","fontSizes","normal","fontWeights","bold","darkest","TagTemplate","data","tag","pageContext","siteTitle","site","siteMetadata","title","works","allMarkdownRemark","edges","keywords","normalVelocity","containerOpacity","addEventListeners","to","type","content"],"mappings":"4FAAA,gIAiBMA,EAAWC,YAAOC,QAAV,oEAAGD,CAAH,iUACH,SAAAE,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,SACjB,SAAAH,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,MAAQ,QAC3C,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,UAAUC,UAC7B,SAAAL,GAAK,OAAIA,EAAMC,MAAMK,YAAYC,QAarC,SAAAP,GAAK,OAAIA,EAAMC,MAAMC,OAAOM,WACjB,SAAAR,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,SAiHrCM,UA7GsB,SAAC,GAAwB,IAAvBC,EAAuB,EAAvBA,KAC9BC,EADqD,EAAjBC,YACpCD,IACDE,EAAYH,EAAKI,KAAKC,aAAaC,MACnCC,EAAgBP,EAAKQ,kBAAkBC,MAE7C,OACE,kBAAC,IAAD,CAAQH,MAAOH,GACb,kBAAC,IAAD,CACEG,MAAK,iBAAmBL,EAAnB,IACLS,SAAU,CAAC,OAAD,0DASZ,kBAAC,IAAD,CACEC,eAAgB,KAChBC,iBAAkB,GAClBC,mBAAmB,IAErB,kBAAC,IAAD,KACE,iCACE,kBAAC,IAAD,KACE,kBAAC,IAAD,qBAAqBZ,GACrB,kBAACd,EAAD,CAAU2B,GAAG,SAAb,aAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAsBC,MAAM,EAAMC,QAAST","file":"component---src-templates-tag-tsx-e2d57f166472464d46af.js","sourcesContent":["import React from 'react'\nimport {graphql, Link} from 'gatsby';\nimport Layout from '../components/Layout'\nimport Head from '../components/Head'\nimport Stars from '../components/Stars'\nimport Content from '../components/Content'\nimport {ContentListContainer} from '../components/ContentList'\nimport {Header, Title, Section, SectionBody} from '../styles'\nimport {Work} from '../types'\nimport styled from 'styled-components';\n\ninterface Props {\n  readonly data: PageQueryData\n  readonly pageContext: {\n    tag: string\n  }\n}\nconst MoreLink = styled(Link)`\n  color: ${props => props.theme.colors.light};\n  background-color: ${props => props.theme.colors.light + '40'};\n  font-size: ${props => props.theme.fontSizes.normal};\n  font-weight: ${props => props.theme.fontWeights.bold};\n  border-radius: 5px;\n  box-sizing: border-box;\n  text-decoration: none;\n  display: block;\n  padding: 0.4rem 0.6rem;\n  border-bottom: 0;\n  white-space: nowrap;\n  line-height: 1;\n  margin: 0.2rem 0 0.2rem 1rem;\n  transition: 0.4s ease;\n\n  &:hover {\n    color: ${props => props.theme.colors.darkest};\n    background-color: ${props => props.theme.colors.light};\n    border-bottom: none;\n  }\n`\nconst TagTemplate: React.FC<Props> = ({data, pageContext}) => {\n  const {tag} = pageContext\n  const siteTitle = data.site.siteMetadata.title\n  const works: Work[] = data.allMarkdownRemark.edges\n\n  return (\n    <Layout title={siteTitle}>\n      <Head\n        title={`Posts tagged \"${tag}\"`}\n        keywords={[\n          `blog`,\n          `gatsby`,\n          `typescript`,\n          `javascript`,\n          `portfolio`,\n          `react`\n        ]}\n      />\n      <Stars\n        normalVelocity={0.0001}\n        containerOpacity={0.3}\n        addEventListeners={false}\n      />\n      <Content>\n        <article>\n          <Header>\n            <Title>Works tagged {tag}</Title>\n            <MoreLink to=\"/blog\">All tags</MoreLink>\n          </Header>\n          <Section>\n            <SectionBody>\n              <ContentListContainer type={true} content={works} />\n            </SectionBody>\n          </Section>\n        </article>\n      </Content>\n    </Layout>\n  )\n}\n\ninterface PageQueryData {\n  site: {\n    siteMetadata: {\n      title: string\n    }\n  }\n  allMarkdownRemark: {\n    edges: {\n      node: {\n        id: string\n        excerpt: string\n        fields: {\n          slug: string\n        }\n        frontmatter: {\n          date: string\n          title: string\n          description: string\n          tags: string[]\n          type: string\n          url: string\n          featuredImage: any\n        }\n      }\n    }[]\n  }\n}\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 1000\n      filter: {frontmatter: {tags: {in: [$tag]}}}\n      sort: {fields: [frontmatter___date], order: DESC}\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMM DD, YYYY\")\n            title\n            description\n            tags\n            type\n            url\n            featuredImage {\n              childImageSharp {\n                fluid(maxWidth: 800) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default TagTemplate\n"],"sourceRoot":""}